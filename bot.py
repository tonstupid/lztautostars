import asyncio
import json
import re
import os
import logging
import random
import argparse
import sys
from typing import Set, Optional, Dict, Any, List, Union

import aiohttp
from pyrogram import Client
from pyrogram.errors import FloodWait

class ColoredFormatter(logging.Formatter):
    COLORS = {
        "GREY": "\x1b[38;20m",
        "BLUE": "\x1b[34;20m",
        "GREEN": "\x1b[32;20m",
        "YELLOW": "\x1b[33;20m",
        "RED": "\x1b[31;20m",
        "BOLD_RED": "\x1b[31;1m",
        "RESET": "\x1b[0m",
    }

    def __init__(self, fmt: str):
        super().__init__()
        self.fmt = fmt
        self.FORMATS = {
            logging.DEBUG: self.COLORS["GREY"] + self.fmt + self.COLORS["RESET"],
            logging.INFO: self.COLORS["BLUE"] + "‚ÑπÔ∏è  " + self.fmt + self.COLORS["RESET"],
            logging.WARNING: self.COLORS["YELLOW"] + "‚ö†Ô∏è  " + self.fmt + self.COLORS["RESET"],
            logging.ERROR: self.COLORS["RED"] + "‚ùå " + self.fmt + self.COLORS["RESET"],
            logging.CRITICAL: self.COLORS["BOLD_RED"] + "üî• " + self.fmt + self.COLORS["RESET"],
            "SUCCESS": self.COLORS["GREEN"] + "‚úÖ " + self.fmt + self.COLORS["RESET"],
        }

    def format(self, record):
        log_fmt = self.FORMATS.get(getattr(record, "levelformat", record.levelno))
        formatter = logging.Formatter(log_fmt, "%Y-%m-%d %H:%M:%S")
        return formatter.format(record)

def setup_logger():
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)

    if not logger.handlers:
        handler = logging.StreamHandler(sys.stdout)
        handler.setFormatter(ColoredFormatter("%(message)s"))
        logger.addHandler(handler)

    def success(message, *args, **kws):
        logger._log(logging.INFO, message, args, extra={'levelformat': 'SUCCESS'}, **kws)
    
    logger.success = success
    return logger

logger = setup_logger()

class Config:
    def __init__(self, config_file: str = "config.json", cli_thread_id: Optional[str] = None, reset: bool = False):
        self.config_file = config_file
        self.cli_thread_id = cli_thread_id
        
        if reset or not self._config_exists_and_is_valid():
            self._run_interactive_setup()

        with open(self.config_file, 'r', encoding='utf-8') as f:
            self._config_data = json.load(f)
        logger.success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

    def _config_exists_and_is_valid(self) -> bool:
        if not os.path.exists(self.config_file):
            return False
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            return config.get("api_id") != "YOUR_API_ID"
        except (json.JSONDecodeError, KeyError):
            return False

    def _run_interactive_setup(self):
        logger.info("–ó–∞–ø—É—Å–∫–∞—é –º–∞—Å—Ç–µ—Ä –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
        config = {
            "api_id": input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API ID: "),
            "api_hash": input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API Hash: "),
            "phone_number": input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, +...): "),
            "lolz_token": input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Lolzteam API —Ç–æ–∫–µ–Ω: "),
            "forum_thread_id": input("–í–≤–µ–¥–∏—Ç–µ ID —Ç–µ–º—ã –Ω–∞ —Ñ–æ—Ä—É–º–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: "),
            "stars_count": 3,
            "check_interval": 30,
            "api_delay": 5,
            "max_retries": 3,
            "processed_posts_file": "processed_posts.json",
            "enable_reply": True,
            "reply_templates": ["–ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–∏–ª –∑–≤–µ–∑–¥—ã. ‚≠ê", "–í—ã–ø–æ–ª–Ω–µ–Ω–æ.", "–°–¥–µ–ª–∞–ª.", "+rep"],
        }
        with open(self.config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
        
        logger.success(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª '{self.config_file}'.")
        logger.info("–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç Telegram.")
        sys.exit()
    
    def __getattr__(self, name: str) -> Any:
        if name == "forum_thread_id" and self.cli_thread_id:
            return self.cli_thread_id
        return self._config_data.get(name)

class ProcessedPostsManager:
    def __init__(self, file_path: str):
        self.file_path = file_path
        self.processed_posts: Set[int] = self._load()

    def _load(self) -> Set[int]:
        try:
            with open(self.file_path, 'r', encoding='utf-8') as f:
                return set(json.load(f))
        except (FileNotFoundError, json.JSONDecodeError):
            return set()

    def _save(self):
        with open(self.file_path, 'w', encoding='utf-8') as f:
            json.dump(list(self.processed_posts), f, indent=4)

    def is_processed(self, post_id: int) -> bool:
        return post_id in self.processed_posts

    def mark_processed(self, post_id: int):
        self.processed_posts.add(post_id)
        self._save()

class LolzAPI:
    def __init__(self, token: str):
        self.base_url = "https://prod-api.lolz.live"
        self.headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}

    async def _request(self, method: str, endpoint: str, is_retry: bool = False, **kwargs) -> Optional[Dict[str, Any]]:
        url = f"{self.base_url}{endpoint}"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.request(method, url, headers=self.headers, **kwargs) as response:
                    if response.status == 200:
                        return await response.json()
                    
                    error_text = await response.text()
                    
                    if response.status == 403 and "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å" in error_text and not is_retry:
                        logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å API. –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                        await asyncio.sleep(3)
                        return await self._request(method, endpoint, is_retry=True, **kwargs)
                    
                    if response.status == 429:
                        logger.warning("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API, –æ–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥...")
                        await asyncio.sleep(10)
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ API {response.status} –¥–ª—è {url}: {error_text}")
                    return None
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}")
            return None

    async def get_thread_posts(self, thread_id: Union[str, int]) -> List[Dict[str, Any]]:
        params = {"thread_id": thread_id, "page": 1, "order": "post_date_reverse"}
        data = await self._request("GET", "/posts", params=params)
        posts = data.get("posts", []) if data else []
        if posts:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –∏–∑ —Ç–µ–º—ã {thread_id}.")
        return posts

    async def create_comment(self, post_id: int, comment_body: str) -> bool:
        payload = {"comment_body": comment_body}
        logger.info(f"–ü—É–±–ª–∏–∫—É—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É {post_id}...")
        response = await self._request("POST", f"/posts/{post_id}/comments", json=payload)
        
        if response and response.get("comment"):
            logger.success(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É {post_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
            return True
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É {post_id}.")
            return False

class TelegramLinkExtractor:
    @staticmethod
    def extract(text: str) -> List[str]:
        patterns = [
            r'https?://(?:www\.)?(?:t\.me|telegram\.me)/([a-zA-Z0-9_]+(?:/\d+)?)',
            r'\[MEDIA=telegram\]([a-zA-Z0-9_]+(?:/\d+)?)\[/MEDIA\]',
            r'data-telegram-post="([a-zA-Z0-9_]+/\d+)"'
        ]
        all_matches = {f"https://t.me/{match}" for p in patterns for match in re.findall(p, text, re.I)}
        return list(all_matches)

    @staticmethod
    def parse(link: str) -> Optional[tuple[str, int]]:
        match = re.search(r't\.me/([^/]+)/(\d+)', link)
        if match:
            return match.group(1), int(match.group(2))
        return None

class TelegramStarsBot:
    SESSION_NAME = "stars_bot_session"

    def __init__(self, config: Config):
        self.config = config
        self.lolz_api = LolzAPI(config.lolz_token)
        self.processed_manager = ProcessedPostsManager(config.processed_posts_file)
        self.client: Optional[Client] = None

    async def send_stars_reaction(self, channel: str, message_id: int) -> bool:
        if not hasattr(self.client, 'send_paid_reaction'):
            logger.error("–ü–ª–∞—Ç–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û—Ç–ø—Ä–∞–≤–∫–∞ '–∑–≤–µ–∑–¥' –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
            return False
        
        try:
            for attempt in range(self.config.max_retries):
                try:
                    await self.client.send_paid_reaction(f"@{channel}", message_id, self.config.stars_count)
                    logger.success(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {self.config.stars_count} –∑–≤–µ–∑–¥ –≤ @{channel}/{message_id}")
                    return True
                except FloodWait as e:
                    logger.warning(f"FloodWait: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.x + 2} —Å–µ–∫—É–Ω–¥.")
                    await asyncio.sleep(e.x + 2)
                except Exception as e:
                    logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤–µ–∑–¥ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                    if attempt < self.config.max_retries - 1:
                        await asyncio.sleep(3 * (attempt + 1))
            return False
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–≤–µ–∑–¥: {e}")
            return False

    async def _process_single_post(self, post: Dict[str, Any]):
        post_id = post.get("post_id")
        if not post_id or self.processed_manager.is_processed(post_id):
            return

        logger.info(f"–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ID {post_id}")
        
        post_content = post.get('post_body_html') or post.get('post_body')
        if not post_content:
            logger.warning(f"–£ –ø–æ—Å—Ç–∞ {post_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            self.processed_manager.mark_processed(post_id)
            return

        links = TelegramLinkExtractor.extract(post_content)
        if not links:
            logger.info(f"–í –ø–æ—Å—Ç–µ {post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ Telegram.")
            self.processed_manager.mark_processed(post_id)
            return

        successful_reactions = 0
        for link in links:
            parsed_link = TelegramLinkExtractor.parse(link)
            if parsed_link:
                channel, message_id = parsed_link
                if await self.send_stars_reaction(channel, message_id):
                    successful_reactions += 1
                await asyncio.sleep(1)
        
        if successful_reactions > 0 and self.config.enable_reply:
            await asyncio.sleep(self.config.api_delay)
            reply_message = random.choice(self.config.reply_templates)
            await self.lolz_api.create_comment(post_id, reply_message)

        logger.info(f"–ü–æ—Å—Ç {post_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        self.processed_manager.mark_processed(post_id)

    async def _main_loop(self):
        while True:
            try:
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ —Ç–µ–º–µ {self.config.forum_thread_id}...")
                posts = await self.lolz_api.get_thread_posts(self.config.forum_thread_id)
                
                if posts:
                    for post in reversed(posts):
                        await self._process_single_post(post)
                else:
                    logger.info("–ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {self.config.check_interval} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(self.config.check_interval)
            
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C).")
                break
            except Exception as e:
                logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(self.config.check_interval)

    async def start(self):
        is_first_login = not os.path.exists(f"{self.SESSION_NAME}.session")
        
        if is_first_login:
            logger.info("–°–µ—Å—Å–∏—è Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞...")

        self.client = Client(self.SESSION_NAME, self.config.api_id, self.config.api_hash)
        
        try:
            await self.client.start()
            logger.success("–ö–ª–∏–µ–Ω—Ç Telegram —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")

            if is_first_login:
                logger.success("–ê–∫–∫–∞—É–Ω—Ç Telegram —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω.")
                logger.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
                return

            logger.info("=" * 40)
            logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞ —Ñ–æ—Ä—É–º–µ: {'–í–ö–õ–Æ–ß–ï–ù–´' if self.config.enable_reply else '–í–´–ö–õ–Æ–ß–ï–ù–´'}")
            logger.info("–ë–æ—Ç –≤ —Ä–∞–±–æ—Ç–µ. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C.")
            logger.info("=" * 40)
            await self._main_loop()

        finally:
            if self.client and self.client.is_connected:
                await self.client.stop()
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

def main():
    parser = argparse.ArgumentParser(description='Telegram Stars Bot –¥–ª—è Lolzteam')
    parser.add_argument('--thread-id', type=str, help='ID —Ç–µ–º—ã —Ñ–æ—Ä—É–º–∞ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç config.json)')
    parser.add_argument('--reset-config', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–Ω–æ–≤–æ')
    args = parser.parse_args()

    try:
        config = Config(cli_thread_id=args.thread_id, reset=args.reset_config)
        bot = TelegramStarsBot(config)
        asyncio.run(bot.start())
    except (ValueError, TypeError) as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
